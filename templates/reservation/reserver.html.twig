{% block title %}{% endblock %}

{% block body %}
<style>
body {
    font-family: 'Poppins', sans-serif;
    background: linear-gradient(135deg, #667eea, #764ba2);
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
    padding: 20px;
    box-sizing: border-box;
}

.container {
    background-color: #b19cd9;
    border-radius: 20px;
    padding: 25px;
    width: 90%;
    max-width: 750px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    color: #333;
    text-align: center;
    margin-top: 30px;
}

h1 {
    font-size: 26px;
    font-weight: bold;
    color: #4b0082;
    margin-bottom: 20px;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.info-section {
    background: #d8c3f3;
    padding: 15px;
    border-radius: 12px;
    margin-bottom: 15px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    text-align: left;
}

.info-section h3 {
    margin-bottom: 10px;
    font-size: 18px;
    font-weight: bold;
    color: #4b0082;
    text-transform: uppercase;
}

label {
    font-weight: bold;
    display: block;
    margin: 10px 0 5px;
    color: #333;
}

input[type="date"],
input[type="text"] {
    width: 100%;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
    font-size: 16px;
    text-align: center;
}

.payment-section {
    background: #e6d1fa;
    padding: 15px;
    border-radius: 12px;
    margin-top: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    text-align: left;
}

.payment-section h3 {
    font-size: 20px;
    color: #4b0082;
    margin-bottom: 10px;
}

.button-container {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
}

.styled-button {
    display: inline-block;
    padding: 12px 20px;
    font-size: 16px;
    font-weight: bold;
    color: #fff;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    text-decoration: none;
    width: 48%;
    text-align: center;
}

.btn-primary {
    background: linear-gradient(45deg, #4b0082, #6a11cb);
}

.btn-primary:hover {
    background: linear-gradient(45deg, #3a0061, #54108a);
}

.btn-cancel {
    background: #ff4d4f;
}

.btn-cancel:hover {
    background: #cc0000;
}

@media (max-width: 768px) {
    .button-container {
        flex-direction: column;
    }
    .styled-button {
        width: 100%;
        margin-top: 10px;
    }
}
</style>

<div class="container">
    <h1>R√©servation et Paiement</h1>

    {# Informations du V√©hicule #}
    <div class="info-section">
        <h3>Informations du V√©hicule</h3>
        <p><strong>Marque :</strong> {{ offre.voiture.marque }}</p>
        <p><strong>Mod√®le :</strong> {{ offre.voiture.modele }}</p>
        <p><strong>Disponibilit√© :</strong> üìÜ {{ offre.dateDebutDisponibilite|date('d/m/Y') }} ‚Üí {{ offre.dateFinDisponibilite|date('d/m/Y') }}</p>
    </div>

    {# Formulaire de R√©servation #}
    <form id="reservationForm"
      data-dispo-debut="{{ offre.dateDebutDisponibilite|date('Y-m-d') }}"
      data-dispo-fin="{{ offre.dateFinDisponibilite|date('Y-m-d') }}">
        <input type="hidden" name="id_offre" value="{{ offre.id }}">

        <label for="date_debut">Date de d√©but :</label>
        <input type="date" name="date_debut" id="date_debut" required>

        <label for="date_fin">Date de fin :</label>
        <input type="date" name="date_fin" id="date_fin" required>

        {# Section Paiement #}
        <div class="payment-section">
            <h3>Paiement</h3>
            <label>Num√©ro de carte :</label>
            <input type="text" id="cardNumber" maxlength="16" required>

            <label>Date d'expiration :</label>
            <input type="text" id="expiryDate" placeholder="MM/AAAA" maxlength="7" required>

            <label>Cryptogramme (CVV) :</label>
            <input type="text" id="cvv" maxlength="3" required>
        </div>

        {# Boutons d'actions #}
        <div class="button-container">
            <button type="submit" class="styled-button btn-primary">‚úÖ Valider et Payer</button>
            <a href="{{ path('homepage') }}" class="styled-button btn-cancel">‚ùå Retour √† l'accueil</a>
        </div>
    </form>
</div>

<script>
document.getElementById("reservationForm").addEventListener("submit", function(event) {
    event.preventDefault();

    let cardNumber = document.getElementById("cardNumber").value;
    let expiryDate = document.getElementById("expiryDate").value;
    let cvv = document.getElementById("cvv").value;
    let idOffre = document.querySelector('input[name="id_offre"]').value;
    let dateDebut = document.getElementById("date_debut").value;
    let dateFin = document.getElementById("date_fin").value;
    let form = event.target;
    let dispoDebut = new Date(form.dataset.dispoDebut);
    let dispoFin = new Date(form.dataset.dispoFin);

    if (dateDebut < dispoDebut || dateFin > dispoFin) {
        alert("‚ùå Les dates choisies ne respectent pas la p√©riode de disponibilit√© de la voiture.");
        return;
    }

    if (!/^[0-9]{16}$/.test(cardNumber)) {
        alert("‚ùå Le num√©ro de carte doit contenir exactement 16 chiffres.");
        return;
    }

    if (!/^[0-9]{3}$/.test(cvv)) {
        alert("‚ùå Le cryptogramme doit contenir exactement 3 chiffres.");
        return;
    }

    fetch("/reservation/valider", {
    method: "POST",
    headers: {
        "X-Requested-With": "XMLHttpRequest",
        "Content-Type": "application/json"
    },
    body: JSON.stringify({ id_offre: idOffre, date_debut: dateDebut, date_fin: dateFin })
})
.then(async response => {
    const contentType = response.headers.get("Content-Type");
    
    if (contentType && contentType.includes("application/json")) {
        const data = await response.json();
        if (data.success) {
            alert("‚úÖ R√©servation confirm√©e !");
            window.location.href = "{{ path('homepage') }}";
        } else {
            alert("‚ùå " + data.error);
        }
    } else {
        const text = await response.text();
        console.error("‚ùå R√©ponse non JSON :", text);
        alert("‚ùå Une erreur inattendue est survenue (non JSON).");
    }
})
.catch(async (error) => {
    const text = await error.text?.();
    console.error("Erreur brute:", text || error);
    alert("‚ùå Une erreur inattendue est survenue.\n" + (text || error));
});


});
</script>

{% endblock %}
